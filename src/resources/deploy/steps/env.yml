---
- name: "Set variables"
  set_fact:
    envfile_path: "{{ ansistrano_shared_path if ansistrano_shared_path is defined else current_shared_path }}/.env"

- name: "Check if .env file exists"
  stat:
    path: "{{ envfile_path }}"
  register: envfile

- name: Create .env file backup
  copy:
    src: "{{ current_realease_path }}/.env"
    dest: "{{ current_realease_path }}/.env.bak"
    remote_src: yes
  when: force_deploy is defined and envfile.stat.exists

- name: Copy .env file from local to remote
  copy:
    src: "{{ project_path }}/.deploy-env"
    dest: "{{ envfile_path }}"
  when: force_deploy is defined or envfile.stat.exists == false

- name: "Search and replace values in .env file"
  replace:
    path: "{{ envfile_path }}"
    regexp: "{{ item.key }}"
    replace: "{{ item.value }}"
  when: force_deploy is defined or envfile.stat.exists == false
  with_items:
    - { key: "@application",     value: "{{ application }}" }
    - { key: "@domain",          value: "{{ domain }}" }
    - { key: "@dkimprivatekey",  value: "{{ ansistrano_shared_path }}/{{ dkim_storage_private_key_path }}" }
    - { key: "@dbname",          value: "{{ sqlite_database_path if database_connection == 'sqlite' else database_name }}" }
    # - { key: "@dbname",          value: "{{ database_name }}" }
    - { key: "@dbuser",          value: "{{ database_user }}" }
    - { key: "@dbpwd",           value: "{{ vault_database_password }}" }

- name: Include optimize file
  include_tasks: "{{ playbooks_directory_path }}/deploy/steps/optimize.yml"
  when: force_deploy is defined

- name: Include handlers
  include_tasks: "{{ playbooks_directory_path }}/deploy/handlers.yml"
  when: force_deploy is defined
