---
- name: Import database from remote to host
  hosts: all
  gather_facts: no
  remote_user:  "{{ user }}"

  tasks:
  - name: Include default variables
    include_vars: "{{ playbooks_directory_path }}/variables/default.yml"

  - name: Include variables
    include_vars: "{{ playbooks_directory_path }}/variables/db.yml"

  - name: Include password file
    include_vars: "{{ stub_deploy_password_file_path }}"

  - name: Get remote database driver
    shell: "php{{ php_version }} artisan tinker --execute=\"echo config('database.default');\""
    register: remote_database_driver
    args:
      chdir: "{{ current_realease_path }}"

  - name: Get local database driver
    shell: "php artisan tinker --execute=\"echo config('database.default');\""
    register: local_database_driver
    args:
      chdir: "{{ project_path }}"
    delegate_to: localhost


  # SQLITE
  - name: "SQLITE: Get remote database url"
    shell: "php{{ php_version }} artisan tinker --execute=\"echo config('database.connections.{{ remote_database_driver.stdout }}.database');\""
    register: remote_sqlite_database_path
    args:
      chdir: "{{ current_realease_path }}"
    when: "local_database_driver.stdout == 'sqlite' and remote_database_driver.stdout == 'sqlite'"

  - name: "SQLITE: Dump remote sqlite database"
    shell: "sqlite3 {{ remote_sqlite_database_path.stdout }} .dump > {{ database_dump_filename }}"
    args:
      chdir: "{{ current_realease_path }}"
    when: "local_database_driver.stdout == 'sqlite' and remote_database_driver.stdout == 'sqlite'"

  - name: "SQLITE: Copy file from remote to host"
    fetch:
      src: "{{ current_realease_path }}/{{ database_dump_filename }}"
      dest: "{{ project_path }}/"
      owner: "{{ host_current_user }}"
      group: "{{ host_current_user }}"
      mode: 0775
    when: "local_database_driver.stdout == 'sqlite' and remote_database_driver.stdout == 'sqlite'"

  - name: "SQLITE: Remove remove database dump"
    file:
      path: "{{ current_realease_path }}/{{ database_dump_filename }}"
      state: absent
    when: "local_database_driver.stdout == 'sqlite' and remote_database_driver.stdout == 'sqlite'"

  - name: "SQLITE: Get local sqlite database path"
    shell: "php artisan tinker --execute=\"echo config('database.connections.{{ local_database_driver.stdout }}.database');\""
    register: local_sqlite_database_path
    args:
      chdir: "{{ project_path }}"
    delegate_to: localhost
    when: "local_database_driver.stdout == 'sqlite' and remote_database_driver.stdout == 'sqlite'"

  - name: "SQLITE: Copy local sqlite database before importing"
    copy:
      src: "{{ local_sqlite_database_path.stdout }}"
      dest: "{{ local_sqlite_database_path.stdout }}.bak"
      owner: "{{ host_current_user }}"
      group: "{{ host_current_user }}"
      mode: 0775
    delegate_to: localhost
    when: "local_database_driver.stdout == 'sqlite' and remote_database_driver.stdout == 'sqlite'"

  - name: "SQLITE: Remove local database"
    file:
      path: "{{ local_sqlite_database_path.stdout }}"
      state: absent
    delegate_to: localhost
    when: "local_database_driver.stdout == 'sqlite' and remote_database_driver.stdout == 'sqlite'"

  - name: "SQLITE: Import remote database in local"
    shell: "sqlite3 {{ local_sqlite_database_path.stdout }} < {{ database_dump_filename }}"
    args:
      chdir: "{{ project_path }}"
    delegate_to: localhost
    when: "local_database_driver.stdout == 'sqlite' and remote_database_driver.stdout == 'sqlite'"

  - name: "SQLITE: Change local database ownership, group and permissions"
    file:
      path: "{{ local_sqlite_database_path.stdout }}"
      owner: "{{ host_current_user }}"
      group: "{{ host_current_user }}"
      mode: 0775
    delegate_to: localhost
    when: "local_database_driver.stdout == 'sqlite' and remote_database_driver.stdout == 'sqlite'"

  - name: "SQLITE: Remove local sqlite dump file"
    file:
      path: "{{ project_path }}/{{ database_dump_filename }}"
      state: absent
    delegate_to: localhost
    when: "local_database_driver.stdout == 'sqlite' and remote_database_driver.stdout == 'sqlite'"


  # MYSQL
  - name: "MYSQL: Get remote host"
    shell: "php{{ php_version }} artisan tinker --execute=\"echo config('database.connections.{{ remote_database_driver.stdout }}.host');\""
    register: remote_mysql_database_host
    args:
      chdir: "{{ current_realease_path }}"
    when: "local_database_driver.stdout == 'mysql' and remote_database_driver.stdout == 'mysql'"

  - name: "MYSQL: Get remote port"
    shell: "php{{ php_version }} artisan tinker --execute=\"echo config('database.connections.{{ remote_database_driver.stdout }}.port');\""
    register: remote_mysql_database_port
    args:
      chdir: "{{ current_realease_path }}"
    when: "local_database_driver.stdout == 'mysql' and remote_database_driver.stdout == 'mysql'"


  # - name: "MYSQL: Get remote username"
  #   shell: "php{{ php_version }} artisan tinker --execute=\"echo config('database.connections.{{ remote_database_driver.stdout }}.username');\""
  #   register: remote_mysql_database_username
  #   args:
  #     chdir: "{{ current_realease_path }}"
  #   when: "remote_database_driver.stdout == 'mysql'"

  # - name: "MYSQL: Get remote password"
  #   shell: "php{{ php_version }} artisan tinker --execute=\"echo config('database.connections.{{ remote_database_driver.stdout }}.password');\""
  #   register: remote_mysql_database_password
  #   args:
  #     chdir: "{{ current_realease_path }}"
  #   when: "remote_database_driver.stdout == 'mysql'"


  # - name: "MYSQL: Get remote database"
  #   shell: "php{{ php_version }} artisan tinker --execute=\"echo config('database.connections.{{ remote_database_driver.stdout }}.database');\""
  #   register: remote_mysql_database_database
  #   args:
  #     chdir: "{{ current_realease_path }}"
  #   when: "remote_database_driver.stdout == 'mysql'"

  - name: "MYSQL: dump remote database"
    mysql_db:
      state: dump
      login_host: "{{ remote_mysql_database_host.stdout }}"
      login_port: "{{ remote_mysql_database_port.stdout }}"
      login_user: "{{ database_user }}"
      login_password: "{{ vault_database_password }}"
      name: "{{ database_name }}"
      target: "{{ current_realease_path }}/{{ database_dump_filename }}"
    when: "local_database_driver.stdout == 'mysql' and remote_database_driver.stdout == 'mysql'"

  - name: "MYSQL: Copy file from remote to host"
    fetch:
      src: "{{ current_realease_path }}/{{ database_dump_filename }}"
      dest: "{{ project_path }}/"
      owner: "{{ host_current_user }}"
      group: "{{ host_current_user }}"
      mode: 0775
      flat: yes
    when: "local_database_driver.stdout == 'mysql' and remote_database_driver.stdout == 'mysql'"

  - name: "MYSQL: Remove remote mysql dump file"
    file:
      path: "{{ current_realease_path }}/{{ database_dump_filename }}"
      state: absent
    when: "local_database_driver.stdout == 'mysql' and remote_database_driver.stdout == 'mysql'"


  # - name: Ending the 1st play now
  #   meta: end_play

  - name: "MYSQL: Get local username"
    shell: "php artisan tinker --execute=\"echo config('database.connections.{{ local_database_driver.stdout }}.username');\""
    register: local_mysql_database_username
    args:
      chdir: "{{ project_path }}"
    delegate_to: localhost
    when: "local_database_driver.stdout == 'mysql' and remote_database_driver.stdout == 'mysql'"

  - name: "MYSQL: Get local host"
    shell: "php artisan tinker --execute=\"echo config('database.connections.{{ local_database_driver.stdout }}.host');\""
    register: local_mysql_database_host
    args:
      chdir: "{{ project_path }}"
    delegate_to: localhost
    when: "local_database_driver.stdout == 'mysql' and remote_database_driver.stdout == 'mysql'"


  - name: "MYSQL: Get local port"
    shell: "php artisan tinker --execute=\"echo config('database.connections.{{ local_database_driver.stdout }}.port');\""
    register: local_mysql_database_port
    args:
      chdir: "{{ project_path }}"
    delegate_to: localhost
    when: "local_database_driver.stdout == 'mysql' and remote_database_driver.stdout == 'mysql'"


  - name: "MYSQL: Get local password"
    shell: "php artisan tinker --execute=\"echo config('database.connections.{{ local_database_driver.stdout }}.password');\""
    register: local_mysql_database_password
    args:
      chdir: "{{ project_path }}"
    delegate_to: localhost
    when: "local_database_driver.stdout == 'mysql' and remote_database_driver.stdout == 'mysql'"

  - name: "MYSQL: Get local database"
    shell: "php artisan tinker --execute=\"echo config('database.connections.{{ remote_database_driver.stdout }}.database');\""
    register: local_mysql_database_database
    args:
      chdir: "{{ project_path }}"
    delegate_to: localhost
    when: "local_database_driver.stdout == 'mysql' and remote_database_driver.stdout == 'mysql'"

  - debug:
      var: local_mysql_database_database

  - name: "MYSQL: Import database from remote to host"
    shell: "mysqldump --user='{{ local_mysql_database_username.stdout }}' --password='{{ local_mysql_database_password.stdout }}' --host='{{ local_mysql_database_host.stdout }}' --port='{{ local_mysql_database_port.stdout }}' {{ local_mysql_database_database.stdout }} < {{ project_path }}/{{ database_dump_filename }}"
    args:
      chdir: "{{ project_path }}"
    delegate_to: localhost
    when: "local_database_driver.stdout == 'mysql' and remote_database_driver.stdout == 'mysql'"


  # - name: "MYSQL: import database from remote to host"
  #   mysql_db:
  #     state: import
  #     login_host: "{{ local_mysql_database_host.stdout }}"
  #     login_port: "{{ local_mysql_database_port.stdout }}"
  #     login_user: "{{ local_mysql_database_username }}"
  #     login_password: "{{ local_mysql_database_password.stdout }}"
  #     name: "{{ local_mysql_database_database.stdout }}"
  #     target: "{{ project_path }}/{{ database_dump_filename }}"
  #     # config_file: ""
  #   delegate_to: localhost
  #   when: "local_database_driver.stdout == 'mysql' and remote_database_driver.stdout == 'mysql'"

  - name: "MYSQL: Remove local mysql dump file"
    file:
      path: "{{ project_path }}/{{ database_dump_filename }}"
      state: absent
    delegate_to: localhost
    when: "local_database_driver.stdout == 'mysql' and remote_database_driver.stdout == 'mysql'"

  - name: "Change administrators password"
    shell: "php artisan tinker --execute=\"DB::table('{{ db_dump_administrators_table_name }}')->where('email', '{{ item }}')->update(['password' => bcrypt('{{ vault_admin_local_password }}')])\""
    args:
      chdir: "{{ project_path }}"
    with_items: "{{ db_dump_administrators_emails | split(' ') | reject('sameas', '') | map('trim') }}"
    delegate_to: localhost
    when: "db_dump_change_administrators_password == 'yes' or db_dump_change_administrators_password == 'true'"

  - name: Clear database cache
    command: "php artisan modelCache:clear"
    ignore_errors: yes # will not run if model cache package was not installed
    args:
      chdir: "{{ project_path }}"
    delegate_to: localhost
    when: "db_dump_change_administrators_password == 'yes' or db_dump_change_administrators_password == 'true'"
